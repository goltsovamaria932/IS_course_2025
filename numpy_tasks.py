import numpy as np

def uniform_intervals(a, b, n):
    """–°–æ–∑–¥–∞–µ—Ç numpy –º–∞—Å—Å–∏–≤ - —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ—Ç a –¥–æ b –Ω–∞ n –æ—Ç—Ä–µ–∑–∫–æ–≤.

    Args:
        a: –ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.
        b: –ö–æ–Ω–µ—Ü –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.
        n: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ä–µ–∑–∫–æ–≤ (–∞ —Ç–∞–∫–∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –≤ –º–∞—Å—Å–∏–≤–µ,
           –≤–∫–ª—é—á–∞—è –æ–±–µ –≥—Ä–∞–Ω–∏—Ü—ã).

    Returns:
        numpy.ndarray: –ú–∞—Å—Å–∏–≤ numpy, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–æ—á–∫–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞–∑–±–∏–µ–Ω–∏—è.
                       –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - a, –ø–æ—Å–ª–µ–¥–Ω–∏–π - b.
    """
    return np.linspace(a, b, n)

def test1():
    assert np.allclose(uniform_intervals(-1.2, 2.4, 7), np.array([-1.2, -0.6,  0. ,  0.6,  1.2,  1.8,  2.4]))

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
test1()
print("–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!")

def cyclic123_array(n):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç numpy –º–∞—Å—Å–∏–≤ –¥–ª–∏–Ω—ã 3n, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏ —á–∏—Å–ª–∞–º–∏ 1, 2, 3, 1, 2, 3, 1....

    Args:
        n: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —Ü–∏–∫–ª–∞ (1, 2, 3).  –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∞—è –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ –±—É–¥–µ—Ç 3*n.

    Returns:
        numpy.ndarray: –ú–∞—Å—Å–∏–≤ numpy, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —á–∏—Å–ª–∞ 1, 2, 3.
    """
    base_array = np.array([1, 2, 3])
    return np.tile(base_array, n)

def test2():
    assert np.allclose(cyclic123_array(4), np.array([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]))

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
test2()
print("–¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω!")

def first_n_odd_number(n):
    """3. –°–æ–∑–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ –ø–µ—Ä–≤—ã—Ö n –Ω–µ—á–µ—Ç–Ω—ã—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª"""
    pass

def zeros_array_with_border(n):
    """4. –°–æ–∑–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω—É–ª–µ–π —Ä–∞–∑–º–µ—Ä–∞ n x n —Å "—Ä–∞–º–∫–æ–π" –∏–∑ –µ–¥–∏–Ω–∏—Ü –ø–æ –∫—Ä–∞—è–º."""
    pass

def chess_board(n):
    """5. –°–æ–∑–¥–∞—ë—Ç –º–∞—Å—Å–∏–≤ n x n —Å —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–æ–π –∏–∑ –Ω—É–ª–µ–π –∏ –µ–¥–∏–Ω–∏—Ü"""
    pass

def matrix_with_sum_index(n):
    """6. –°–æ–∑–¥–∞—ë—Ç ùëõ √ó ùëõ  –º–∞—Ç—Ä–∏—Ü—É —Å (ùëñ,ùëó)-—ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ä–∞–≤–Ω—ã–º ùëñ+ùëó."""
    pass

def cos_sin_as_two_rows(a, b, dx):
    """7. –í—ã—á–∏—Å–ª–∏—Ç–µ $cos(x)$ –∏ $sin(x)$ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ [a, b) —Å —à–∞–≥–æ–º dx, 
    –∞ –∑–∞—Ç–µ–º –æ–±—ä–µ–¥–∏–Ω–∏—Ç–µ –æ–±–∞ –º–∞—Å—Å–∏–≤–∞ —á–∏—Å–µ–ª –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤. """
    pass

def compute_mean_rowssum_columnssum(A):
    """8. –î–ª—è numpy –º–∞—Å—Å–∏–≤–∞ A –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Å—É–º–º—É —Å—Ç—Ä–æ–∫ –∏ —Å—É–º–º—É —Å—Ç–æ–ª–±—Ü–æ–≤."""
    pass

def sort_array_by_column(A, j):
    """ 9. –°–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ numpy –º–∞—Å—Å–∏–≤–∞ A –ø–æ j-–º—É —Å—Ç–æ–ª–±—Ü—É –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è."""
    pass

def compute_integral(a, b, f, dx, method):
    """10. –°—á–∏—Ç–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞–ª —Ñ—É–Ω–∫—Ü–∏–∏ f –Ω–∞ –æ—Ç—Ä–µ–∑–∫–µ [a, b] —Å —à–∞–≥–æ–º dx 3-–º—è –º–µ—Ç–æ–¥–∞–º–∏:  
    method == 'rectangular' - –º–µ—Ç–æ–¥–æ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞   
    method == 'trapezoidal' - –º–µ—Ç–æ–¥–æ–º —Ç—Ä–∞–ø–µ—Ü–∏–π   
    method == 'simpson' - –º–µ—Ç–æ–¥–æ–º –°–∏–º–ø—Å–æ–Ω–∞  
    """
    pass
